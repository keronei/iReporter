import unittest
import json
from ....app import launcher

class TestEndPointsWithDatabases(unittest.TestCase):
    def setUp(self):
        self.app = launcher(app_config["development"])
        self.client = self.app.test_client
        #user_id should be autogenerated + date registered
        self.user = {'firstname':'michael',
                     'secondname':'Pat',
                     'othernames':'alex',
                     'phoneNumber':'+54739224261',
                     'email':'michael@gmail.com',
                     'username':'mike',
                     'isAdmin':False,
                     'password':'michael123'}
        #auto entries: createdOn,Id,createdBy,type,status
        self.intervention = {'location':'780,0.343',
                     'status':'under investigation',
                     'Images':['evidence.png','caught.jpg'],
                     'Images':['stunt.mpeg','live.mp4'],
                     'comment':'This incidence has been observed with various health workers.'}
        self.user_credential = {
            'email':'michael@gmail.com',
            'password':'michael123'
        }
        #bounds the launched app to current context
        with self.app.app_context():
            User = User(self.user)
            
    def test_user_sign_up(self):
        response = self.client().post('/api/v2/sign-up',
                    headers={'Content-Type': 'application/json'},
                    data=json.dumps(self.user))
        self.assertEqual(response.status_code, 204,"Successful user sign-up request returns 204")
        json_feedback = json.loads(response.data)
        self.assertEqual(json_feedback.get('data'), 'Success',
                             "Should return 'Success' as the success message"
                             )
    #expected posibilities:
    #user does'nt exist
    #matched email but wrong password
    def test_user_login(self):
        #first sign-up, then request access...
        response = self.client().post('/api/v2/sign-in',
                    headers={'Content-Type': 'application/json'},
                    data=json.dumps(self.user_credential))
        self.assertEqual(response.status_code, 200,"Successful user sign-in request returns 200")
        json_feedback = json.loads(response.data)
        self.assertEqual(json_feedback.get('data'), 'Authenticated',
                             "Should return 'Authenticated' as the success message"
                             )        
      
    def test_user_login_with_wrong_password(self):
        response = self.client().post('/api/v2/sign-in',
                    headers={'Content-Type': 'application/json'},
                    data = "{'michael@gmail.com','password':'not_password'}")
        self.assertEqual(response.status_code, 401,"Unauthorized request should be 401")
        json_feedback = json.loads(response.data)
        self.assertEqual(json_feedback.get('data'), 'Authenticated',
                             "Should return 'Authenticated' as the success message"
                             )        
    def test_create_new_intervention(self):
        response = self.client().post('/api/v2/intervention',
                    headers={'Content-Type': 'application/json'},
                    data=json.dumps(self.intervention))
        self.assertEqual(response.status_code, 204,"created request returns 204")
        json_feedback = json.loads(response.data)
        self.assertEqual(json_feedback.get('data'), 'Success',
                             "Should return 'Success' as the success message"
                             )
   
        
        
    
            
                     
                    